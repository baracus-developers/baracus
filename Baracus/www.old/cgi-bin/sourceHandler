#!/usr/bin/perl

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################

use lib '/var/spool/baracus/www/modules';
use BATools qw(:standard);
use CGI qw(:standard);
use MIME::Base64;

print "Content-type: text/html\n\n";

$fid = param('fid') || "";
$ref = param('ref') || "no";

$iso = param('iso') || "";
$user = param('user') || "";
$pass = param('pass') || "";
$ePass = encode_base64($pass);
chomp($ePass);

$proc = "";
$rURL = "";
$qStr = "";

$proxy = param('proxy') || "";
$paddr = param('paddr') || "";
$puser = param('puser') || "";
$ppass = param('ppass') || "";
$pePass = encode_base64($ppass);
chomp($pePass);

$distro = param('distro') || "NODISTRO";
$addon = param('addon') || "NOADDON";
$curDistro = param('curDistro') || "";

$verbose = "-v";
$redir = ' 2>&1';

my $testcmd = "ps -eaf";
my $refresh = "";
my $content = "";
my $header = "";
my $headError = "<font class='error'>Error</font>";
my $sub = param('sub') || "nosub";

if( $sub eq "nosub")
{
	$submit = param('submit') || "";
	
	if( $submit eq "Toggle Status")
	{
		$filter = param('filter') || "";
		$status = param('status') || "";
		$ref = "yes";
		$proc = " ";
		$rURL = "sourceVer";
		$qStr = "?status=$status&filter=$filter&distro=$curDistro&addon=$addon";
	
		$sub = "tog";
	}
	elsif( $submit eq "Delete")
	{
		$sub = "del";
		$ref = "yes";
	}
	elsif( $submit eq "Add")
	
	{
		$sub = "add";
		$ref = "yes";
	}
}


if( $sub eq "list")
{
	$content = $content.listContent();
	$header = listHeader();
}
elsif( $distro eq "NODISTRO" && $addon eq "NOADDON")
{
	$content = $content.noDistroContent( $sub);
	$header = $headError;
}
elsif( $sub eq "add")
{
	$content = $content.addContent();
	$header = addHeader();
}
elsif( $sub eq "del")
{
	$content = $content.delContent();
	$header = delHeader();
}
elsif( $sub eq "ena")
{
	$content = $content.enaContent();
	$header = enaHeader();
}
elsif( $sub eq "dis")
{
	$content = $content.disContent();
	$header = disHeader();
}
elsif( $sub eq "ver")
{
	$content = $content.verContent();
	$header = verHeader();
}
elsif( $sub eq "tog")
{
	$content = $content.togContent();
	$header = togHeader();
}
else
{
	$content = $content."Invalid Subfunction: $sub";
	$header = $headError;
}

$content = $content."\n\n\n";

if( $ref eq "yes")
{
	$refresh = "onLoad=\"doLoad( '$rURL', '$qStr', 2)\"";
	if( !$proc)
	{
		$proc = "Processing";
	}
}


print <<HTML0

<html>
	<head>
		<META HTTP-EQUIV="Expires" CONTENT="Tue, 04 Dec 1993 21:29:02 GMT">
		<link rel='stylesheet' href='/$BATools::baRoot/css/common.css' type='text/css' >
		<script type="text/javascript" src="/$BATools::baRoot/script/common.js"></script>
	</head>
	<div id='output'>
	<body background="/baracus/images/bg-grad.jpg" $refresh>
	<pre>$content</pre>
	<h1>$header</h1>
	<h3>$proc</h3>
	<body>
	</div>
</html>

HTML0

;

########################################################################################################
#  Subfunction = list
########################################################################################################

sub listHeader()
{
	return "List Install Sources";
}

sub listContent()
{
	#my $listcmd = "sudo /usr/share/baracus/perl/directSqlFS.pl list linux.sle".$redir;
	my $listcmd = "sudo create_install_source verify --distro=*";
	#my $retString = $listcmd."\n";
	my $retString = $retString.execute( $listcmd);
	return $retString;
}

########################################################################################################
#  No Distro
########################################################################################################

sub noDistroContent
{
	my $curSub = $_[0];
	my $r = "\n\nPlease select a distribution\n";
	refresh();
	$rURL = "/baracus/ba/source".ucfirst($curSub);
	$qStr = "";
	return $r;
}

########################################################################################################
#  Subfunction = add
########################################################################################################

sub addHeader()
{
	return "Add Install Source";
}

sub addContent()
{
	my $cmd;
	my $pCmd;
	my $r = "";

	if( $distro eq "NODISTRO")
	{
		$distro = $curDistro;
	}
	
	if( $iso eq "iso")
	{
		if( $proxy eq "proxy")
		{
			$cmd = "perl /$BATools::baPath/modules/expectIP add $distro $addon $user $ePass $paddr $puser $pePass";
			$pCmd = "perl /$BATools::baPath/modules/expectIP add $distro $addon $user $******** $paddr $puser ********";
			$r = "\n\n".background( $cmd);
		}
		else
		{
			$cmd = "perl /$BATools::baPath/modules/expectI add $distro $addon $user $ePass";
			$pCmd = "perl /$BATools::baPath/modules/expectI add $distro $addon $user ********";
			$r = "\n\n".background( $cmd);
		}
	}
	else
	{
		$cmd = "perl /$BATools::baPath/modules/execute add $distro $addon $verbose";
		$pCmd = $cmd;
					
		$r = "\n\n".background( $cmd);
	}
	
	return $r;	
}

########################################################################################################
#  Subfunction = del (Delete Install Source)
########################################################################################################

sub delHeader()
{
	return "Delete Install Source";
}

sub delContent()
{
	if( $distro eq "NODISTRO")
	{
		$distro = $curDistro;
	} 
	
	my $cmd = "perl /$BATools::baPath/modules/execute remove $distro $addon no $redir";
	my $r = "";
	
	$r = background( $cmd);
	if( $r =~ m/^Error/)
	{
		norefresh();
	}

	return $r;
}

########################################################################################################
#  Subfunction = ena (Enable Install Source)
########################################################################################################

sub enaHeader()
{
	return "Enable Install Source";
}

sub enaContent()
{
	my $enacmd = "sudo create_install_source enable --distro=$distro $verbose".$redir;
	my $retString = execute( $enacmd);

	norefresh();
	return $retString;
}

########################################################################################################
#  Subfunction = ena (Toggle Install Source Status)
########################################################################################################

sub togHeader()
{
	return "Toggle Install Source Status";
}

sub togContent()
{
	my $toggle;
	if( $distro eq "NODISTRO")
	{
		$toggle = $addon;
	}
	else
	{
		$toggle = $distro;
	}
	
	my $retString = BATools::toggleStatus( $toggle);

	return $retString;
}

########################################################################################################
#  Subfunction = dis (Disable Install Source)
########################################################################################################

sub disHeader()
{
	return "Disable Install Source";
}

sub disContent()
{
	my $discmd = "sudo create_install_source disable --distro=$distro $verbose".$redir;
	my $retString = execute( $discmd);

	norefresh();
	return $retString;
}

########################################################################################################
#  Subfunction = ver (Verify Install Source)
########################################################################################################

sub verHeader()
{
	return "Verify Install Source";
}

sub verContent()
{
	my $enacmd = "sudo create_install_source verify --distro=$distro $verbose".$redir;
	my $retString = execute( $enacmd);
	chomp( $retString);

	norefresh();
	return $retString;
}

########################################################################################################
#  Control Functions
########################################################################################################

sub norefresh()
{
	$ref = "no";
}
sub refresh()
{
	$ref = "yes";
}
sub execute
{
	my $cmd = $_[0];	
	my $retString = "\n\n";
	$retString = `$cmd`;
	return $retString;
}
sub background
{
	my $cmd = $_[0];
	my $rfile = BATools::generate_random_string();
	$cmd = "$BATools::baPath/modules/pfork.bin ".$cmd." $rfile";
	my $poolPath = "$BATools::baPath/htdocs/pool/";
	my $myFile;
	my $retString = "";
	
	if( $fid eq "")
	{	
		my $output = `$cmd`;
		$retString = $retString."\n\nPlease Wait...\n".$output;
		$qStr = "&fid=".$rfile;
	}
	else
	{
		$myFile = $poolPath.$fid;		
		if( !(open (MYFILE, $myFile)))
		{ 
			norefresh();
			return "Error Opening File: $myFile\n$!\n\nFINISHED";
		}
		while( <MYFILE>)
		{
			if( $_ =~ m/FINISHED/)
			{
				norefresh();
			}
			$retString = $retString.$_;
			
		}
		close (MYFILE);
		
	}	
	return $retString;	
}
