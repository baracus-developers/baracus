#!/usr/bin/perl

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################

use lib '/var/spool/baracus/www/modules';
use BATools qw(:standard);
use CGI qw(:standard);
use CGI::Carp qw ( fatalsToBrowser );
use File::Basename;

our $rURL = "repo";
our $ref = "yes";
our $seconds = 3;
our $qStr = "";

my $refresh = "";


print "Content-type: text/html\n\n";

my $op   = param('op') || "";
my $repo = param('repo') || "";
my $rpm  = param("rpm") || "";

my $content = "";

my $headError = "<font class='error'>Error</font>";

if ( $op eq "remove" ) {
    if ( $repo eq "" ) {
        $content = $content."Missing required data";
        $header = $headError;
    } else {
        $content = $content.RemoveRepoContent();
        $header = "Remove Repo";
    }
}
elsif ( $op eq "Create" ) {
    if (( $repo eq "" ) || ( $rpm eq "" )) {
        $content = $content."Missing required data";
        $header = $headError;
    } else {
        $content = $content.CreateRepoContent();
        $header = "Create Repo";
    }
}
elsif ( $op eq "Add" ) {
    if (( $repo eq "" ) || ( $rpm eq "" )) {
        $content = $content."Missing required data";
        $header = $headError;
    } else {
        $content = $content.AddRepoContent();
        $header = "Adding to Repo";
    }
}
else {
    $content = $content."Routing error";
    $header = $headError;
}

if( $ref eq "yes")
{
	$refresh = "onLoad=\"doLoad( '$rURL', '$qStr', $seconds)\"";
}

$content = $content."\n\n\n";

print <<HTML0

<html>
	<head>
		<META HTTP-EQUIV="Expires" CONTENT="Tue, 04 Dec 1993 21:29:02 GMT">
		<link rel='stylesheet' href='/$BATools::baRoot/css/common.css' type='text/css' >
		<script type="text/javascript" src="/$BATools::baRoot/script/common.js"></script>
	</head>
	<div id='output'>
	<body background="/baracus/images/bg-grad.jpg" $refresh>
	<pre>$content</pre>
	<h1>$header</h1>
	<h3>$proc</h3>
	<body>
	</div>
</html>

HTML0

;
########################################################################################################
# Add
########################################################################################################

sub RemoveRepoContent()
{
    my $cmd = "sudo barepo remove $repo ";

    my $r = $cmd . "\n";
    $r .= `$cmd`;
    return $r;
}

sub CreateRepoContent()
{
    my $rpmfile = SaveRepoRpm();
    my $cmd = "sudo barepo create $repo /tmp/$rpmfile ";

    my $r = $cmd . "\n";
    $r .= `$cmd`;
    return $r;
}

sub AddRepoContent()
{
    my $rpmfile = SaveRepoRpm();
    $rURL = "repoDetail?repo=$repo";
    my $cmd = "sudo barepo add $repo /tmp/$rpmfile ";

    my $r = $cmd . "\n";
    $r .= `$cmd`;
    return $r;
}

sub SaveRepoRpm()
{
    $CGI::POST_MAX = 1024 * 50000;  
    my $safe_filename_characters = "a-zA-Z0-9_.-";  
    my $upload_dir = "/tmp";  
 
    my $query = new CGI;  
 
    if ( !$rpm ) { 
        print $query->header ( );  
        print "There was a problem uploading your photo (try a smaller file).";  
        exit;  
    }  
 
    my ( $name, $path, $extension ) = fileparse ( $rpm, '\..*' );  
    $rpm = $name . $extension;  
    $rpm =~ tr/ /_/;  
    $rpm =~ s/[^$safe_filename_characters]//g;  
 
    if ( $rpm =~ /^([$safe_filename_characters]+)$/ ) {
        $rpm = $1;  
    } else { 
        die "Filename contains invalid characters";  
    }  
 
    my $upload_filehandle = $query->upload("photo");  
 
    open ( UPLOADFILE, ">/tmp/$rpm" ) or die "$!";  
    binmode UPLOADFILE;  
 
    while ( <$upload_filehandle> ) {
        print UPLOADFILE;  
    }  

    close UPLOADFILE;

    return $rpm;
}
