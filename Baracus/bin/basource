#!/usr/bin/perl -w

use strict;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;
use XML::Simple;

=pod

=head1 NAME

B<basource> - baracus tool to manage the retrival of distro isos and creation of network install sources

=head1 SYNOPSIS

B<basource> E<lt>commandE<gt> [options and arguments]

Where E<lt>commandE<gt> is

Where command is one of

    add     --distro <x>  Add a new build source for distribution <x>
    remove  --distro <x>  Remove <x> as a build source
    update  --distro <x>  Update sharetype and/or shareip for distribution <x>
    disable --distro <x>  Diable a build source for distribution <x>
    enable  --distro <x>  Enable a build source for distribution <x>
    verify  --distro <x>  Verify build source for distribution <x>
    detail  --distro <x>  Display specifics about a distribution

    list [base|addon] [--distro <x>] [--all] List known distros

    service --start       Start defaults [ SHARE_TYPE and dhcpd ]
    service --stop        Stop defaults [ SHARE_TYPE and dhcpd ]
    service --start <y>   Start specified service(s) (nfs,http,dhcpd)
    service --stop  <y>   Stop specified service(s) (nfs,http,dhcpd)

    help      This 'Usage' summary message.
    man       Detailed man page.

Use 'man' or 'help <command>' for more details.

=head1 DESCRIPTION

This tool assists with the downloading of distribution iso files, the creation of network install sources for those distributions, and the management of those network services and related control files.

=head1 OPTIONS

=over 4

=item -v --verbose Be verbose with output

=back

=cut

my $man  = 0;
my $help = 0;

my $cmds = {
            'add'      => \&add,
            'remove'   => \&remove,
            'update'   => \&update,
            'enable'   => \&enable,
            'disable'  => \&disable,
            'verify'   => \&verify,
            'list'     => \&list,
            'detail'   => \&detail,
            'init'     => \&init,
            'service'  => \&service,
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            all        => 0,
            nolabels   => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'all'       => \$opts->{all},
           'nolabels'  => \$opts->{nolabels},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'text/xml');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;

exit $status;

die "DOES NOT EXECUTE\n";

###########################################################################


=head1 COMMANDS

=head2 add --distro <name> [--addon <addos> [--addon ...]] [--check|--isos [--proxy]]

Where

  --distro <name>  specifies the full name of the base distribution
                   to use, e.g., sles-11-x86_64, sles-10.2-x86_64,
                   opensuse-11.1-i586

  --addon <name>   specifies any addon(s) to layer over the base
                   distribution sles-10.2-rt-x86_64, sles-11-hae-i586

  --no-loopback    Force source trees to be synced to local directory
  --check          Force check of the ISOs already present
  --isos           Download missing ISO files
  --proxy          Use a proxy service to fetch the ISO files

=cut

sub add() {

    my $verb = 'add';
    my $distro = "";
    my $addons = "";
    my $proxy;
    my $check;
    my $isos;
    my $loopback = 1;

    GetOptions(
               'distro=s'  => \$distro,
               'addons=s'  => \&multiarg_handler,
               'proxy'     => \$proxy,
               'check'     => \$check,
               'isos|i'    => \$isos,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";

    my $response = $browser->post( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;

}

=head2 update --distro <name> [--addon <addos> [--addon ...]] [ --all ]

Where

  --distro <name>  specifies the full name of the base distribution
                   to update, e.g., sles-11-x86_64, sles-10.2-x86_64,
                   opensuse-11.1-i586

  --addon <name>   specifies the addon(s) to be updated. like these
                   distributions sles-10.2-rt-x86_64, sles-11-hae-i586

  --all            update all the addons and the base distro.

Without specifying --all, update will not update the base distro if it has any addons present so that a two step update process must be used to first update all the addons listed for the base distro and then another invocation with the base --distro alone.

=cut

sub update() {

    my $verb = 'update';
    my $distro;
    my $sharetype = "";
    my $shareip = "";

    @ARGV = @_;

    GetOptions(
               'distro=s'    => \$distro,
               'addons=s'    => \&multiarg_handler,
               'sharetype=s' => \$sharetype,
               'shareip=s'   => \$shareip,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";
    $url .= "&sharetype=$sharetype" if (defined $sharetype);
    $url .= "&shareip=$shareip" if (defined $shareip);

    my $response = $browser->put( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;

}

=head2 remove --distro <name> [--addon <addos> [--addon ...]] [ --all ]

Where

  --distro <name>  specifies the full name of the base distribution
                   to remove, e.g., sles-11-x86_64, sles-10.2-x86_64,
                   opensuse-11.1-i586

  --addon <name>   specifies the addon(s) to be removed. like these
                   distributions sles-10.2-rt-x86_64, sles-11-hae-i586

  --all            remove all the addons and the base distro.

Without specifying --all, remove will not remove the base distro if it has any addons present so that a two step remove process must be used to first remove all the addons listed for the base distro and then another invocation with the base --distro alone.

=cut

sub remove() {

    my $verb = 'remove';
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addons=s'  => \&multiarg_handler,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";

    my $response = $browser->put( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;

}

=head2 enable { --distro <name> | --addon <name> }

Where

  --distro <name>  specifies the full name of the distribution to use

=cut

sub enable() {

    my $verb = 'enable';
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addon=s'   => \$distro,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }
    
    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";

    my $response = $browser->put( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;

}

=head2 disable { --distro <name> | --addon <name> }

Where

  --distro <name>  specifies the full name of the distribution to
                   use, e.g., sles-11-x86_64, sles-10.2-rt-x86_64,
                   opensuse-11.1-i586, sles-11-hae-i586

=cut

sub disable() {

    my $verb = 'disable';
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addon=s'   => \$distro,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";

    my $response = $browser->put( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;
}

=head2 verify { --distro <name> | --addon <name> }

Verify some details for the distro or addon specified

=cut

sub verify() {

    my $verb = 'verify';
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addon=s'   => \$distro,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb/$distro";

    my $response = $browser->get( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    printf "%-14s $data->{target}\n", "Target:";
    printf "%-14s $data->{creation}\n", "Created:";
    printf "%-14s $data->{change}\n", "Modified:" if (defined $data->{change});
    printf "%-14s $baState{ $data->{status} }\n", "Status:";
    printf "%-14s $data->{sharetype}\n", "Service:";
    printf "%-14s $data->{shareip}\n", "Share IP:";
    printf "%-14s $data->{share} $data->{sharestatus}\n", "Share:";
    printf "%-14s $data->{path}\n", "Path:";
    printf "%-14s $data->{kernel} $data->{kernelstatus}\n", "kernel:";
    printf "%-14s $data->{initrd} $data->{ramdiskstatus}\n", "ramdisk:";

    return 0;
}

=head2 detail { --distro <name> | --addon <name> }

Displays many details for the distribution specified

=cut

sub detail() {

    my $verb = 'detail';
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addon=s'   => \$distro,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb/$distro";

    my $response = $browser->get( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;
}

=head2 list  [ base | addon ] [ --distro <name> | --addon <name> ] [ --all ]

  List distribution state.

  If a distribution has not been added, or has been removed, it is not
  displayed in the output.  To see all Baracus managable distributions
  and their state use the --all option.

Options

    --distro <name>  Exact, or partial with wildcarded ('*')
    --all            See all managable distributions

    base             Scope results to matching base distributions
    addon            For a provided base list the applicable addons

=cut

sub list() {

    my $verb = "list";
    my $distro;

    @ARGV = @_;

    GetOptions(
               'distro=s'  => \$distro,
               'addon=s'   => \$distro,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb/$distro";

    my $response = $browser->get( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    ## Format and print
    unless ( $opts->{quiet} || $opts->{nolabels} ) {
        print "--------------------------------------------------------------------------------\n";
        printf "%-28s %-8s %-8s description\n", "distro", "type", "status";
        print "--------------------------------------------------------------------------------\n";
    }
    for my $distro ( sort keys %$data ) {
        printf "%-28s %-8s %-8s $data->{$distro}->{description}\n", "$distro", "$data->{$distro}->{type}", "$data->{$distro}->{status}";
    }

    return 0;
}

=head2 init [ --exports | --mounts] [ --all ]

  Initialize or sync distro share media mount/exports to internal table.

  Since Baracus does not use /etc/exports or /etc/fstab to maintain iso
  mounts or exports the init function can be used to make sure all media
  is properly available.  Usually this function is only necessary as part
  of the system boot initialization of Baracus but can be called explictly
  if media seems to be missing.

Options

    --exports        Export any media marked for export that is not already
    --mounts         Mount and media marked for mount that is not already
    --all            check for both out of sync exports and mounts

=cut

sub init() {

    my $command = 'init';

    my $exports = 0;
    my $mounts = 0;
    my $all;
    my $ret = 0;

    @ARGV = @_;

    GetOptions(
               'exports!'  => \$exports,
               'mounts!'   => \$mounts,
               );

    return 0;
}

=head2 service { --start [service] | --stop [service] }

With service you need to specify start or stop

    service --start
    service --stop

With current sysconfig settings, if specific services are unspecified, these default to start or stop both the SHARE_TYPE and dhcpd services.

You can also list the services to start or stop specifically

    service --start "http dhcpd" --stop nfs

=cut

sub service() {

    my $command = 'service';

    my $startlist = "";
    my $stoplist  = "";

    @ARGV = @_;

    GetOptions(
               'start:s'    => \&multiarg_handler,
               'stop:s'     => \&multiarg_handler,
               );

    if ( scalar @ARGV ) {
        printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        &help( $opts, $cmds, $command );
    }

    return 0
}

######################################################################

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
