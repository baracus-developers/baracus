#!/usr/bin/perl -w

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################


use strict;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;
use XML::Simple;

use lib "/usr/share/baracus/perl";

use BaracusCore   qw( :subs );
use BaracusConfig qw( :vars :subs );

=pod

=head1 NAME

B<bapower> - baracus tool for BMC power management

=head1 SYNOPSIS
 
B<bapower> E<lt>commandE<gt> [options]

Where E<lt>commandE<gt> is

  off    --mac <mac> | --hostname <host>  power off hardware.
  on     --mac <mac> | --hostname <host>  power on hardware.
  cycle  --mac <mac> | --hostname <host>  power cycle hardware.
  status --mac <mac> | --hostname <host>  power status.
  remove --mac <mac> | --hostname <host>  Remove BMC entry

  add    --mac <mac> [--hostname <host>] --bmcaddr=<bmc ip> --ctype <BMC type> --login <username> --passwd <password>
         Add BMC entry

  list   [ --mac <mac> | --hostname <host> ] List BMC entries with optional filter

  help   This 'Usage' summary message.
  man    Detailed man page.

Use 'man' or 'help <command>' for more details.

=head1 DESCRIPTION

This tool allows for power management via plugable BMC control modules

=head1 OPTIONS

=over 4

=item -v --verbose  Be verbose with output

=back

=cut

my $man  = 0;
my $help = 0;

my $cmds = {
            'on'     => \&on,
            'off'    => \&off,
            'cycle'  => \&cycle,
            'status' => \&status,
            'add'    => \&add,
            'remove' => \&remove,
            'list'   => \&list,
            'help'   => \&myhelp,
            'man'    => \&myman,
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            all        => 0,
            nolabels   => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'text/xml');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;

exit $status;

die "DOES NOT EXECUTE\n";

###########################################################################
##
## commands
##

=head1 COMMANDS

=head2 add --mac <mac> [ --hostname <name> ]

Add power registration (via mac) entry to Baracus.

Argument

  --mac <addr>             MAC address to be added

Option

  --hostname <name>        Provide the hostname as an alias to refer to this host

=cut


sub add() {

    my $verb = 'add';

    my $mac;
    my $hostname;
    my $login;
    my $passwd;
    my $ctype;
    my $bmcaddr;
    my $node;
    my $other;

    @ARGV = @_;
    GetOptions(
               'mac=s'      => \$mac,
               'hostname=s' => \$hostname,
               'ctype=s'    => \$ctype,
               'login=s'    => \$login,
               'passwd=s'   => \$passwd,
               'bmcaddr=s'  => \$bmcaddr,
               'node=s'     => \$node,
               'other=s'    => \$other,
               );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/power/$verb";
    $url .= "?";
    $url .= "mac=$mac" if ( defined $mac );
    if ( defined $mac ) {
        $url .= "&"
    } else {
        $url .= "?";
    }
    $url .= "hostname=$hostname" if ( defined $hostname );
    $url .= "&ctype=$ctype"      if ( defined $ctype );
    $url .= "&login=$passwd"     if ( defined $passwd );
    $url .= "&bmcaddr=$bmcaddr"  if ( defined $bmcaddr );
    $url .= "&node=$node"        if ( defined $node );
    $url .= "&other=$other"      if ( defined $other );
    

    my $req = HTTP::Request->new(POST => $url);
    $req->content_type('text/xml');

    my $response = $browser->request( $req );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 remove { --mac <mac> | --hostname <name> }

Remove power registration entry from Baracus.  Specify the power device by --mac or if a hostname has been associated with this mac you can instead specify --hostname to locate the entry to be removed.

=cut

sub remove()
{

    my $verb = 'remove';

    my $mac;
    my $hostname;
    my $node;

    @ARGV = @_;
    GetOptions(
               'mac=s'      => \$mac,
               'hostname=s' => \$hostname,
               );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required\n";
        return 1;
    }

    if ( ( defined $mac ) and ( defined $hostname ) ) {
        print "--mac and --hostname cannoe be combined\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    ## Route takes dynamically typed node
    if ( defined $mac ) {
        $node = $mac
    } else {
        $node = $hostname;
    }

    my $url = "http://$baseurl:$port/power/$verb";
    $url .= "?node=$node";

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('text/xml');

    my $response = $browser->request( $req );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 list { nodes | states | templates } [ --filter <spec> ]

Types

  nodes               shows all nodes
  states              state data releated to hosts
  templates           build client templates

Option

  --filter <spec>     exact, or partial with wildcarded ('*')

Where <spec> is of format:

  mac::<address>
  hostname::<name>

=cut

sub list
{
    my $verb = "list";
    my $filter = "";

    @ARGV = @_;

    GetOptions(
               'filter=s'  => \$filter,
               );

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    $filter = "all" unless ( $filter ne "" );

    my $url = "http://$baseurl:$port/power/$verb/$filter";

    my $response = $browser->get( $url );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    unless ($opts->{quiet}) {
    print "--------------------------------------------------------------------------------------\n";
    printf "%-8s %-16s %-18s %-18s %-16s %-16s ", "ctype", "bmcaddr", "mac", "hostname", "node", "other";
    print "\n";
    print "--------------------------------------------------------------------------------------\n";
    }


    for my $node ( sort keys %$data ) {
        printf "%-8s %-16s %-18s %-18s %-16s %-16s\n",
               "$data->{$node}->{ctype}", "$data->{$node}->{bmcaddr}", "$data->{$node}->{mac}",
               "$data->{$node}->{hostname}", "$data->{$node}->{node}", "$data->{$node}->{other}";
    }

    return 0;  
}

=head2 detail { node | inventory } { --mac <mac> | --hostname <name> }

Types

  node               full details of client
  inventory          hardware inventory for client

Argument

  --mac <mac>        provide the mac to identify client of interest
  --hostname <name>  provide the hostname to identify client of interest
                     note that not all clients have associated hostname info

=cut

sub detail
{

    my $verb = "detail";

    my $filter = "";
    my $hostname = "";
    my $mac = "";

    @ARGV = @_;
    GetOptions(
               'mac=s'      => \$mac,
               'hostname=s' => \$hostname,
               );

    if ( scalar @ARGV ) {
        printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        &help( $opts, $verb );
    }

    my $url = "http://$baseurl:$port/host/$verb/$mac";

    my $response = $browser->get( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    my $xml = new XML::Simple;
    my $data = $xml->XMLin( $response->content );

    print "Host Entry:\n";
    print "-----------\n";
    printf "%-11s", "MAC:";      print "$data->{mac}" if $data->{mac}; print "\n";
    printf "%-11s", "Hostname:"; print "$data->{hostname}" if $data->{hostname}; print "\n";
    printf "%-11s", "IP Addr:";  print "$data->{ip}" if $data->{ip}; print "\n";
    print "\n";
    print "Status: \n";
    print "------- \n";
    printf "%-10s", "state:";   print" $data->{oper} " if $data->{oper}; print "\n";
    printf "%-10s", "active:";  print" $data->{admin} " if $data->{admin}; print "\n";
    printf "%-10s", "pxecurr:"; print" $data->{pxecurr} " if $data->{pxecurr}; print "\n";
    printf "%-10s", "pxenext:"; print" $data->{pxenext} " if $data->{pxenext}; print "\n";
    print "\n";
    print "Build\n";
    print "-----\n";
    printf "%-18s", "distro:";            print " $data->{distro}" if $data->{distro}; print "\n";
    printf "%-18s", "addons:";            print " $data->{addons}" if $data->{addons}; print "\n";
    printf "%-18s", "hardware:";          print " (ver $data->{hardware_ver}) $data->{hardware}" if $data->{hardware}; print "\n";
    printf "%-18s", "profile:";           print " (ver $data->{profile_ver}) $data->{profile}" if $data->{profile}; print "\n";
    printf "%-18s", "autobuild:";         print " (ver $data->{autobuild_ver}) $data->{autobuild}\n" if $data->{autobuild}; print "\n";
    printf "%-18s", "vars:";              print " $data->{vars}" if $data->{vars}; print "\n";

    print "\n";
    if ( $data->{modules} ) {
## This is an array, need to update to handle as such
        print "Build Modules\n";
        print "-------------\n";
        printf "%-18s", "modules:";
        printf "\n%-18s $data->{modules}", "";
        print "\n";
        print "\n";
    }

    if ( $data->{storageid} ) {
        print "Storage\n";
        print "-------\n";
        printf "%-18s", "StorageID:"; print " $data->{storageid}";
        print "\n";
        print "\n";
    }

    if ( $data->{mcastid} ) {
        print "MCast\n";
        print "-----\n";
        printf "%-18s", "MultiCastID:"; print " $data->{mcastid}";
        print "\n";
        print "\n";
    }

    print "Additional Details\n";
    print "------------------\n";
    printf "%-18s", "Loghost:";           print " $data->{loghost}"  if $data->{loghost}; print "\n";
    printf "%-18s", "Remote Access:";     print " $data->{raccess}"  if $data->{raccess}; print "\n";
    printf "%-18s", "Auto Wipe:";         print " $data->{autonuke}" if $data->{autonuke}; print "\n";
    printf "%-18s", "Entry Creation:";    print " $data->{creation}" if $data->{creation}; print "\n";
    printf "%-18s", "Last Modification:"; print " $data->{change}"   if $data->{change}; print "\n";

    return 0;

}

=head2 enable { --mac <addr> | --hostname <name> }

Enable the specified host node.  This will update the admin state of
the node to enabled.

=cut

=head2 disable { --mac <addr> | --hostname <name> }

Disable the specified host node.  This will update the admin state to
disabled and serve pxewait boot menus to pxebooting disabled nodes.

=cut

sub enable  { &_enable_disable_( "enable",  @_ );}
sub disable { &_enable_disable_( "disable", @_ );}

sub _enable_disable_
{

}


######################################################################

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
