#!/usr/bin/perl -w

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################


use strict;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;
use XML::Simple;

use lib "/home/cruejones/git/baracus/Baracus/lib";

use Dancer qw( :syntax);
use Baracus::Core    qw( :subs );
use Baracus::Config  qw( :vars :subs );
use Baracus::Storage qw( :vars );

=pod

=head1 NAME

B<bastorage> - Baracus identification and handling for SAN, NAS and images

=head1 SYNOPSIS

B<bastorage> E<lt>commandE<gt> [options and arguments]

Where E<lt>commandE<gt> is

    add       <...>  Add an identifier, name and description for media or share
    remove    <...>  Remove Baracus knowledge of media or share
    list      <...>  List the known non-local storage shares and media available
    detail    <...>  Show all known information about storage

    help    This 'Usage' summary message.
    man     Detailed man page.

Use 'man' or 'help <command>' for more details.

=head1 DESCRIPTION

This tool allows for the identification of disserperate network storage (Network Attached Storage or Storage Area Networks) for potential use with baracus hosts as available disks for network boot targets (e.g. nfsroot, ibft/iscsi).

=head1 OPTIONS

=over 4

=item -v --verbose  Be verbose with output

=back

=cut

my $apiver = "api/v1";
my $man  = 0;
my $help = 0;

my $cmds = {
            'add'           => \&add,
            'remove'        => \&remove,
            'list'          => \&list,
            'detail'        => \&detail,

            'help'          => \&help,
            'man'           => \&man,
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'application/json');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;

exit $status;

die "DOES NOT EXECUTE\n";

###########################################################################
##
## commands
##


=head1 COMMANDS

=head2 add --name <storageid> --type <type> --storage <path_or_uri> [options]

With arguments

  --name <storageid>       Unique identifying name.
  --type <sharetype>       Storage protocol [iscsi|nfs|aoe|image]
  --storage <path_or_uri>  Path, unique resource id, or iqn identifier.

For --type other than 'image' or 'clone'

  --ip <server>            Address of network storage server.

And options

  --description <"text">   Quoted descriptive text for the share.
  --size <"text">          User description for the storage size.
  --username <username>    Username for storage authentication
  --passwd <password>      Password for storage authentication

=cut


sub add() {

    my $verb = 'add';

    my $storageid; 
    my $storageip;
    my $storage;
    my $type;
    my $username;
    my $passwd;
    my $description;
    my $size;

    @ARGV = @_;

    GetOptions
        (
         'name=s'        => \$storageid,
         'ip=s'          => \$storageip,
         'storage=s'     => \$storage,
         'type=s'        => \$type,     # in as string & store as int
         'username=s'    => \$username,
         'passwd=s'      => \$passwd,
         'description=s' => \$description,
         'size=s'        => \$size,
         );

    unless ( ( defined $storageid ) ) {
        print "--name <name> required to add new storage entry\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{storageid}   = $storageid   if ( defined $storageid );
    $json_hash->{storageip}   = $storageip   if ( defined $storageip );
    $json_hash->{storage}     = $storage     if ( defined $storage );
    $json_hash->{type}        = $type        if ( defined $type );
    $json_hash->{username}    = $username    if ( defined $username );
    $json_hash->{passwd}      = $passwd      if ( defined $passwd );
    $json_hash->{description} = $description if ( defined $description );
    $json_hash->{size}        = $size        if ( defined $size );


    my $url = "http://$baseurl:$port/$apiver/storage";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(POST => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "$data->{storageid}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 remove --name <storageid>

This command does not remove any data from the network storage device. Instead this only removes the info from Baracus so that it cannot easily be assigned to a host.

Also note this does not remove any existing relations of this share with existing host entries.

=cut

sub remove()
{

    my $verb = 'remove';
    my $storageid;

    @ARGV = @_;

    GetOptions(
               'name=s' => \$storageid,
               );

    unless ( defined $storageid ) {
        print "--name <name> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/$apiver/storage/$storageid";

    my $req = HTTP::Request->new(DELETE => $url);
    $req->content_type('application/json');

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "$data->{storageid}  :  $data->{action} $data->{result} \n";


    return 0;

}

=head2 list [ --filter <name|storage>::<partial*|specific> ] [ --uri ]

List the network storage for which Baracus has information.

Option

     --uri                    list with uri output

     --filter name::'partial*'   filter results based on wildcard
     --filter storage::specific  filter for a single match

=cut

sub list
{
    my $verb = "list";
    my $filter = "*";

    @ARGV = @_;

    GetOptions(
               'filter=s'  => \$filter,
               );

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/$apiver/storage/$filter";

    my $req = HTTP::Request->new( 'GET', $url );
    $req->header( 'Accept' => 'application/json' );

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    unless ($opts->{quiet}) {
        print "----------------------------------------------------------------------------------------------\n";
        printf "%-26s %-7s %-18s %-30s\n", "name", "type", "ip", "storage";
        print "----------------------------------------------------------------------------------------------\n";
    }

    for my $node ( sort keys %$data ) {
        printf "%-26s %-7s %-18s %-30s\n",
               "$data->{$node}->{storageid}", "$data->{$node}->{type}",
               "$data->{$node}->{storageip}", "$data->{$node}->{storage}";
    }

    return 0;  
}

=head2 detail --name <storageid>

Show details for specified network storage device

=cut

sub detail
{
    my $verb = "detail";
    my $storageid;

    @ARGV = @_;

    GetOptions(
               'name=s' => \$storageid,
               );

    if ( scalar @ARGV ) {
        printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        &help( $opts, $verb );
    }

    unless ( defined $storageid ) {
        print "--name <name> required\n";
        return 1;
    }

    my $url = "http://$baseurl:$port/$apiver/storage/detail/$storageid";

    my $req = HTTP::Request->new( 'GET', $url );
    $req->header( 'Accept' => 'application/json' );

    my $response = $browser->request( $req );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    printf "%-14s %s\n", "Storage ID",   $data->{storageid};
    printf "%-14s %s\n", "Storage Type", $data->{type};
    printf "%-14s %s\n", "Storage IP",   $data->{storageip} ;
    printf "%-14s %s\n", "Storage",      $data->{storage} ;
    printf "%-14s %s\n", "Storage URI",  $data->{uri} ;
    if ( defined $data->{size} and $data->{size} ne "" ) {
        printf "%-14s %s\n", "Size", $data->{size} ;
    }
    if ( defined $data->{description} and $data->{description} ne "" ) {
        printf "%-14s %s\n", "Description", $data->{description} ;
    }
    if ( defined $data->{username} and $data->{username} ne "" ) {
        printf "%-14s %s\n", "Username", $data->{username} ;
    }

    return 0;

}

######################################################################

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
