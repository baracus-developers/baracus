#!/usr/bin/perl -w

use strict;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;
use XML::Simple;

use lib "/usr/share/baracus/perl";

use BaracusCore   qw( :subs );
use BaracusConfig qw( :vars :subs );
use BaracusState  qw( :vars :admin );
use BaracusSource qw( :vars :subs );


=pod

=head1 NAME

B<bahost> - baracus tool to manage physical node entries.

=head1 SYNOPSIS

B<bahost> E<lt>commandE<gt> [subcommand] [options and arguments]

Where E<lt>commandE<gt> is one of

  add     --mac <mac>    add a new physical device via mac entry
  remove  --mac <mac>    delete a physical device via mac entry
  enable  --mac <mac>    enable a physical device via mac entry
  disable --mac <mac>    disable a physical device via mac entry

  list nodes             list registered node entires
  list states            list state data on registered node entries
  list templates         list build templates assigned to node entries

  detail node <...>      display detailed state data for a physical node entry
  detail inventory <...> display hardware inventory for a physical node entry

And, where <...> indicates additional required arguments.

Use 'man' or 'help <command> [<type>]' for more details.

=head1 DESCRIPTION

This tool allows administrators to add/delete and enable/disable physical devices.
Additionally this tool allows for listing of registered nodes, their states and inventories.
Active physical device entries must be assigned an 'action' via bado to boot accordingly.

=head1 OPTIONS

=over 4

=item -v --verbose  Be verbose with output

=item -q --quiet Be as quiet as possible

=item -n --nolabels  Do not print headers/footers

=back

=cut

my $man  = 0;
my $help = 0;

my $cmds = {
            'add'       => \&add,
            'remove'    => \&remove,
            'list'      => \&list,
            'detail'    => \&detail,
            'inventory' => \&inventory,
            'enable'    => \&enable,
            'disable'   => \&disable
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            all        => 0,
            nolabels   => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'all'       => \$opts->{all},
           'nolabels'  => \$opts->{nolabels},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'text/xml');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;

exit $status;

die "DOES NOT EXECUTE\n";

###########################################################################
##
## commands
##

=head1 COMMANDS

=head2 add --mac <mac> [ --hostname <name> ]

Add node (via mac) entry to Baracus.

Argument

  --mac <addr>             MAC address to be added

Option

  --hostname <name>        Provide the hostname as an alias to refer to this host

=cut


sub add() {

    my $verb = 'add';
    my $distro = "";
    my $addons = "";
    my $proxy;
    my $check;
    my $isos;
    my $loopback = 1;

    GetOptions(
               'distro=s'  => \$distro,
               'addons=s'  => \&multiarg_handler,
               'proxy'     => \$proxy,
               'check'     => \$check,
               'isos|i'    => \$isos,
               );

    unless ( defined $distro ) {
        print "--distro <distro> required\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $url = "http://$baseurl:$port/source/$verb";
    $url .= "?distro=$distro";

    my $response = $browser->post( $url );
    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting XML, not ", $response->content_type
      unless $response->content_type eq 'text/xml';

    print $response->content;

    return 0;

}

=head2 remove { --mac <mac> | --hostname <name> }

Remove host entry from Baracus.  Specify the device by --mac or if a hostname has been associated with this mac you can instead specify --hostname to locate the entry to be removed.

=cut

sub remove()
{

}

=head2 list { nodes | states | templates } [ --filter <spec> ]

Types

  nodes               shows all nodes
  states              state data releated to hosts
  templates           build client templates

Option

  --filter <spec>     exact, or partial with wildcarded ('*')

Where <spec> is of format:

  mac::<address>
  hostname::<name>

=cut

sub list
{

}

=head2 detail { node | inventory } { --mac <mac> | --hostname <name> }

Types

  node               full details of client
  inventory          hardware inventory for client

Argument

  --mac <mac>        provide the mac to identify client of interest
  --hostname <name>  provide the hostname to identify client of interest
                     note that not all clients have associated hostname info

=cut

sub detail
{

}

=head2 enable { --mac <addr> | --hostname <name> }

Enable the specified host node.  This will update the admin state of
the node to enabled.

=cut

=head2 disable { --mac <addr> | --hostname <name> }

Disable the specified host node.  This will update the admin state to
disabled and serve pxewait boot menus to pxebooting disabled nodes.

=cut

sub enable  { &_enable_disable_( "enable",  @_ );}
sub disable { &_enable_disable_( "disable", @_ );}

sub _enable_disable_
{

}


######################################################################

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
