#!/usr/bin/perl -w

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################

use strict;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;
use XML::Simple;

use lib "/home/cruejones/git/baracus/Baracus/lib";

use Dancer qw( :syntax);
use Baracus::Core    qw( :subs );
use Baracus::Config  qw( :vars :subs );
use Baracus::Storage qw( :vars );

=pod

=head1 NAME

B<bado> - Baracus "do" some action with things Baracus knows about

=head1 SYNOPSIS

B<bado> E<lt>commandE<gt> [options]

Where E<lt>commandE<gt> is

    build     <...>  Boot and use autobuild recipe to install a distro
    image     <...>  Boot and install a specified image
    clone     <...>  Boot and clone drive to create specified image
    empty     <...>  Clear relations and PXEBOOT presents infinite wait screen
    inventory <...>  Force re/collection of inventory next pxeboot
    migrate   <...>  Migrate a file system to another medium
    localboot <...>  Boot from localdisk
    netboot   <...>  Boot a network image
    pxewait   <...>  Boot a pxewait shell
    rescue    <...>  Boot device into a rescue mode
    wipe      <...>  Use Darik's Boot and Nuke to wipe connected drive(s)

    help    This 'Usage' summary message.
    man     Detailed man page.

Use 'man' or 'help <command>' for more details.

=head1 DESCRIPTION

This tool allows for specifying actions for hosts.  For example, virtual machines can be network booted with an iscsi target; or re-directed to boot from a localdisk.

=head1 OPTIONS

=over 4

=item -v --verbose  Be verbose with output

=item -q --quiet  Be as quiet as possible

=item -n --nolabels  Do not print headers/footers

=back

=cut

my $apiver = "api/v1";
my $man  = 0;
my $help = 0;

my $cmds = {
            'build'         => \&build,
            'image'         => \&image,
            'clone'         => \&clone,
            'empty'         => \&empty,
            'inventory'     => \&inventory,
            'migrate'       => \&migrate,
            'localboot'     => \&localboot,
            'netboot'       => \&netboot,
            'pxewait'       => \&pxewait,
            'rescue'        => \&rescue,
            'wipe'          => \&wipe,

            'list'          => \&list,  # temp for debug

            'help'          => \&help,
            'man'           => \&man,
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'application/json');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;

exit $status;

die "DOES NOT EXECUTE\n";

###########################################################################
##
## commands
##

=head1 COMMANDS

=head2 build --mac <macaddr> --hostname <name> --ip <ipaddr> <...>

Where

  --mac <macaddr>          Network interface card physical address
                           (in hexidecimal xx:xx:xx:xx:xx:xx format).
  --hostname <name>        Hostname (conforming to DNS without domainname)
                           to identify the box containing the network
                           interface card with the specified <macaddr>.
  --ip <ipaddr>            Client static, or dhcp bound, IP address.
                           Use string 'dhcp' if dynamically assigned.


A profile can be used to accumlate all the other parameters for a similar collection of hosts and can contain networking, distro, and hardware information.

  --profile <pfile>        File with networking and/or other template
                           parameters.

                           See content of the 'default' profile with command:
                             > baconfig detail profile default

                           See all profiles available with command:
                             > baconfig list profiles

Other required parameters, which may be specified on the command-line or in a profile are:

  --distro <os-rev-arch>   Operating system to install on build client.
                           To be sure network install server has distro
                           specified availiable for use
                             > basource add --distro <base-arch>

                           See possible distros to use with
                             > baconfig list distro
                           and
                             > basource list [--distro='*match*']

  --addon <os-rev-addos[-addrev]-arch>

                           Add-ons to layer over the base operating
                           system install for this build client.  May
                           be a list or specified multiple times.

  --hardware <hwteplate>   Hardware template that describes build client
                             > baconfig list hardware

  --module <mfile>         Post-install scripts to run when the host
                           build completes.

                           You can specify this option multiple times
                           for more than one script to run.

                           See all modules available with command:
                             > baconfig list module

  --autobuild <template>   Autoyast, Kickstart, AIK, etc... golden template.
                           A value of 'none' will drop you into the manual
                           installer [default none].

                           See all autobuild templates available with command:
                             > baconfig list autobuild

And further <...> optional parameters include

  --disk <num>             Disk number (zero-based) to boot [ default 0 (first)]
  --partition <num>        Partition number to boot [ default 0 (first)]

  --storageid <storageid>  The storage id for a network root build

  --usevnc                 allow vnc build access
  --vncpass                defines vnc password for remote access

  --usessh                 allow ssh build access
  --sshpass                defines ssh password for remote access
                           These ssh options are only valid for SuSE distros.

  --serialtty              configure serial tty for remote access
  --serialbaud             configure serial line rate for remote access

  --vars <variable=value>  Method to specify a command-line parameter
                           that will override those found in the
                           config files.  You can specify this option
                           multiple times

=cut


sub build() {

    my $verb = 'build';

    my $mac;
    my $hostname;
    my $ip;
    my $distro;
    my $hardware;
    my $profile;
    my $autobuild;
    my $storageid;
    my $addon;
    my $vars;
    my $module;
    my $usevnc;
    my $usessh;
    my $sshpass;
    my $vncpass;
    my $serialtty;
    my $serialbaud;
    my $disk;
    my $partition;

    @ARGV = @_;

    GetOptions
        (
         'mac=s'         => \$mac,
         'hostname=s'    => \$hostname,
         'ip=s'          => \$ip,
         'distro=s'      => \$distro,
         'hardware=s'    => \$hardware,
         'profile=s'     => \$profile,
         'autobuild=s'   => \$autobuild,
         'storageid=s'   => \$storageid,
         'addon=s'       => \&multiarg_handler,
         'vars=s'        => \&multiarg_handler,
         'module=s'      => \&multiarg_handler,
         'usevnc!'       => \$usevnc,
         'vncpass=s'     => \$vncpass,
         'usessh!'       => \$usessh,
         'sshpass=s'     => \$sshpass,
         'serialtty=s'   => \$serialtty,
         'serialbaud=s'  => \$serialbaud,
         'disk=s'        => \$disk,
         'partition=s'   => \$partition,
         );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required to add new storage entry\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{verb}       = $verb;
    $json_hash->{mac}        = $mac if ( defined $mac );
    $json_hash->{hostname}   = $hostname if ( defined $hostname );
    $json_hash->{ip}         = $ip if ( defined $ip );
    $json_hash->{distro}     = $distro if ( defined $distro );
    $json_hash->{hardware}   = $hardware if ( defined $hardware );
    $json_hash->{profile}    = $profile if ( defined $profile );
    $json_hash->{autobuild}  = $autobuild if ( defined $autobuild );
    $json_hash->{storageid}  = $storageid if ( defined $storageid );
    $json_hash->{addon}      = $addon if ( defined $addon );
    $json_hash->{vars}       = $vars if ( defined $vars );
    $json_hash->{module}     = $module if ( defined $module );
    $json_hash->{usevnc}     = $usevnc if ( defined $usevnc );
    $json_hash->{vncpass}    = $vncpass if ( defined $vncpass );
    $json_hash->{usessh}     = $usessh if ( defined $usessh );
    $json_hash->{sshpass}    = $sshpass if ( defined $sshpass );
    $json_hash->{serialtty}  = $serialtty if ( defined $serialtty );
    $json_hash->{serialbaud} = $serialbaud if ( defined $serialbaud );
    $json_hash->{disk}       = $disk if ( defined $disk );
    $json_hash->{partition}  = $partition if ( defined $partition );


    my $url = "http://$baseurl:$port/$apiver/do";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 image --mac <macaddr> --hostname <name> --hardware <hw> { --storageid <store> | --mcastid <chan> }

Deploy an image file to a remote system disk

Arguments

  --mac <macaddr>          Network interface card physical address
                           (in hexidecimal xx:xx:xx:xx:xx:xx format).
  --hostname <name>        Hostname (conforming to DNS without domainname)
                           to identify the box containing the network
                           interface card with the specified <macaddr>.

  --hardware <hw>          Hardware template that describes build client
                           as SuSE family would for bootargs and rootdisk.
                             > baconfig list hardware

  --storageid <storageid>  Image to be deployed, as registered with bastorage.

                           This file should be present in ~baracus/images,
                           but specified here by reference to its related
                           bastorage table entry.

  --mcastid <chan>         Image via multicast. Provide the <chanid> here,

                           There should be a corresponding server, as registered
                           and maintained with the "bamcast" tool.

=cut

sub image()
{

    my $verb = 'image';

    my $mac;
    my $hostname;
    my $hardware;
    my $storageid;
    my $mcastid;

    @ARGV = @_;

    GetOptions
        (
         'mac=s'         => \$mac,
         'hostname=s'    => \$hostname,
         'hardware=s'    => \$hardware,
         'storageid=s'   => \$storageid,
         'mcastid=s'     => \$mcastid,
         );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required to add new storage entry\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{verb}       = $verb;
    $json_hash->{mac}        = $mac if ( defined $mac );
    $json_hash->{hostname}   = $hostname if ( defined $hostname );
    $json_hash->{hardware}   = $hardware if ( defined $hardware );
    $json_hash->{storageid}  = $storageid if ( defined $storageid );
    $json_hash->{mcastid}    = $mcastid if ( defined $mcastid );


    my $url = "http://$baseurl:$port/$apiver/do";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;


}

=head2 pxewait { --mac <macaddr | --hostname <name> }

Set a device to go into pxewait state on the next pxeboot cycle.

Arguments

     --mac <macaddr>     specify device by mac address
     --hostname <name>   specify device by hostname ( if available )

=cut

sub pxewait 
{

    my $verb = 'pxewait';

    my $mac;
    my $hostname;

    @ARGV = @_;

    GetOptions
        (
         'mac=s'         => \$mac,
         'hostname=s'    => \$hostname,
         );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required to set pxewait \n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{verb}       = $verb;
    $json_hash->{mac}        = $mac if ( defined $mac );
    $json_hash->{hostname}   = $hostname if ( defined $hostname );

    my $url = "http://$baseurl:$port/$apiver/do";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;
}

=head2 netboot { --mac <macaddr> | --hostname <name> } --storageid <storageid>

After running this command, the pxeboot entry for the host is enabled, and when that host PXE boots again it will use the network storage device target.

Arguments

  --mac <macaddr>          Specify device by mac address
  --hostname <name>        Specify device by hostname ( if available )

  --storageid <storageid>  Storage ID for bastorage bootable disk entry

=cut

sub netboot 
{
    my $verb = "netboot";

    my $mac;
    my $hostname;
    my $storageid;

    @ARGV = @_;

    GetOptions
        (
         'mac=s'         => \$mac,
         'hostname=s'    => \$hostname,
         'storageid=s'   => \$storageid,
         );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required to set netboot\n";
        return 1;
    }

    unless ( defined $storageid )  {
        print "--storageid required to set netboot\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{verb}       = $verb;
    $json_hash->{mac}        = $mac if ( defined $mac );
    $json_hash->{hostname}   = $hostname if ( defined $hostname );
    $json_hash->{storageid}  = $storageid if ( defined $storageid );

        my $url = "http://$baseurl:$port/$apiver/do";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 wipe { --mac <macaddr> | --hostname <name> } [ --autowipe | --noautowipe ]

At the end of the life cycle for a build client this command is used to erase the harddrives on the host.

After running this command, the pxeboot entry for the host is enabled, and when that host PXE boots again it will download and run the disk wipe program.

Arguments

  --mac <macaddr>          Specify device by mac address
  --hostname <name>        Specify device by hostname ( if available )

Options

  --autowipe               Use with EXTREAM caution. Not for network storage.

                           If --autowipe is used on PXE boot
                           the host will IMMEDIATELY begin to erase
                           (write 0s and 1s multiple times)
                           ALL CONNECTED STORAGE MEDIA.

                           *** Including SANS and iSCSI ***

  --noautowipe             If --noautowipe is used on PXE boot the user
                           is presented a menu to select the devices to
                           irrecoverably erase. [default --noautowipe]

=cut

sub wipe 
{
    my $verb = "wipe";

    my $mac;
    my $hostname;
    my $autowipe=0;

    @ARGV = @_;

    GetOptions
        (
         'mac=s'         => \$mac,
         'hostname=s'    => \$hostname,
         'autowipe!'     => \$autowipe,
         );

    unless ( ( defined $mac ) or ( defined $hostname ) ) {
        print "--mac <mac> or --hostname <hostname> required to set wipe\n";
        return 1;
    }

    if ( scalar @ARGV ) {
            printf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
            &help( $opts, $cmds, $verb );
    }

    my $json_hash = {};
    $json_hash->{verb}       = $verb;
    $json_hash->{mac}        = $mac if ( defined $mac );
    $json_hash->{hostname}   = $hostname if ( defined $hostname );
    $json_hash->{autowipe}   = $autowipe if ( defined $autowipe );

    my $url = "http://$baseurl:$port/$apiver/do";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new(PUT => $url);
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Can't get $url -- ", $response->status_line
      unless $response->is_success;

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    my $data = from_json( $response->content );

    print "( $data->{mac} ) $data->{hostname}  :  $data->{action} $data->{result} \n";

    return 0;

}

######################################################################

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
