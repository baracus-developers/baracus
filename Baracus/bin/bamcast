#!/usr/bin/perl -w

###########################################################################
#
# Baracus build and boot management framework
#
# Copyright (C) 2010 Novell, Inc, 404 Wyman Street, Waltham, MA 02451, USA.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0, as published
# by the Perl Foundation, or the GNU General Public License 2.0
# as published by the Free Software Foundation; your choice.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Both the Artistic
# Licesnse and the GPL License referenced have clauses with more details.
#
# You should have received a copy of the licenses mentioned
# along with this program; if not, write to:
#
# FSF, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110, USA.
# The Perl Foundation, 6832 Mulderstraat, Grand Ledge, MI 48837, USA.
#
###########################################################################

use strict;
use warnings;

use Getopt::Long qw( :config pass_through );
use Pod::Usage;
use LWP;
use HTTP::Cookies;
use Term::ReadKey;

use lib "/home/cruejones/git/baracus/Baracus/lib";

use Dancer qw( :syntax);
use Baracus::Core   qw( :subs  );
use Baracus::Config qw( :vars :subs );
use Baracus::Aux    qw( :subs  );

=pod

=head1 NAME

B<bamcast> - Baracus "multicast" for registering and maintaining multicast image channels

=head1 SYNOPSIS

B<bamcast> E<lt>commandE<gt> [options and arguments]

Where E<lt>commandE<gt> is

    add       <...>  Add a multicast channel identifier, name and description for media or share
    remove    <...>  Remove a multicast channel 
    list      <...>  List all registered multicast channels
    detail    <...>  Provide details of specified multicast channel
  
    enable    Enable multicast channel
    disable   Disables multicast channel

    init      Starts all enabled channels
    destroy   Destroys all running channels

    help      This 'Usage' summary message.
    man       Detailed man page.

Use 'man' or 'help <command>' for more details.

=head1 DESCRIPTION

This tool registeres and maintains Baracus multicast channels for use in multicast image deployments.

=head1 OPTIONS

=over 4

=item -v --verbose  Be verbose with output

=back

=cut

my $apiver = "api/v1";
my $man      = 0;
my $help     = 0;

my $cmds = {
            'add'           => \&add,
            'remove'        => \&remove,
            'list'          => \&list,
            'detail'        => \&detail,
            'enable'        => \&enable,
            'disable'       => \&disable,
            'init'          => \&init,
            'destroy'       => \&destroy,

            'help'          => \&help,
            'man'           => \&man,
            };

my $opts = {
            verbose    => 0,
            quiet      => 0,
            debug      => 0,
            execname   => "",
            LASTERROR  => "",
            };

# Build command line for help, historical reference and point-in-time rebuilding
$opts->{execname} = $0;
$opts->{execname} = $1 if ( $0 =~ m|^.*/([^/].+)| );

GetOptions(
           'verbose'   => \$opts->{verbose},
           'quiet'     => \$opts->{quiet},
           'debug+'    => \$opts->{debug},
           'man'       => \$man,
           'help|?'    => \$help,
           );

&man()  if $man;
&help( $opts, $cmds ) if $help;
&help( $opts, $cmds ) unless ( scalar @ARGV );
if ($ARGV[0] eq "man"  ) { &man(); }
if ($ARGV[0] eq "help" ) { shift @ARGV; &help( $opts, $cmds, @ARGV ); }

## Setup base URL and PORT
my $port = undef;
if ( $baVar{port} ) {
    $port = $baVar{port};
} else {
    $port = "80";
}

my $baseurl = undef;
if ( $baVar{url} ) {
    $baseurl = $baVar{url};
} elsif ( $baVar{serverip} ) {
    $baseurl = $baVar{serverip};
} else {
    print "Edit /etc/sysconfig/baracus to include a ServerIP or URL\n";
    exit 1;
}

print "Using: $baseurl \n" if ($opts->{debug});
print "Using: $port\n" if ($opts->{debug});

# Setup LWP
my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->agent('baracus');
$browser->default_header('Accept' => 'application/json');

## Authenticate request
my $username = "";
my $password = "";
if ( -f "$ENV{HOME}/.barc") {
    print "We have a file\n" if ($opts->{debug});
    open(FILE, "<$ENV{HOME}/.barc");
    while (<FILE>) {
        if (/username/) { chomp ( $username = (split /=/, $_)[1] ); }
        if (/password/) { chomp ( $password = (split /=/, $_)[1] ); }
    }
} else {
    print "enter username: ";
    chomp($username = ReadLine 0);

    print "enter password: ";
    ReadMode 'noecho';
    chomp($password = ReadLine 0);
    ReadMode 'normal';
    print "\n";
}
my $login_url = "http://$baseurl:$port/login?username=$username&password=$password";
my $login_response = $browser->post( $login_url );

my $status = &main( $opts, $cmds, @ARGV );

my $logout_url = "http://$baseurl:$port/logout";
my $logout_response = $browser->get( $logout_url );
print $logout_response->content;
exit $status;

die "DOES NOT EXECUTE";


###############################################################################
##
## commands
##

=head1 COMMANDS

=head2 add --name <channel id> --storageid <storage id> --dataip <dataip> --rdvip <rdvip> --interface <interface> --ratemx <max rate> --mrecv <min recievers>

Where

  --name <unique channel id>    globally unique share locator URI.
  --storageid <storage id>         storage id of storage image to use.
  --dataip <ip>
  --rdvip <ip>
  --interface <network interface>
  --ratemx <max bit rate>
  --mrecv <min # receivers>

=cut

sub add
{
    my $verb = "add";

    unless ( scalar @_ ) {
        &help( $opts, $cmds, $verb );
    }

    @ARGV = @_;

    my $mcastid   = "";
    my $storageid = "";
    my $dataip    = "";
    my $rdvip     = "";
    my $interface = "";
    my $ratemx    = "";
    my $mrecv     = "";

    GetOptions(
               'name=s'        => \$mcastid,
               'storageid=s'   => \$storageid,
               'dataip=s'      => \$dataip,
               'rdvip=s'       => \$rdvip,
               'interface=s'   => \$interface,
               'ratemx=s'      => \$ratemx,
               'mrecv=s'       => \$mrecv,
              );

    if ( scalar @ARGV ) {
        $opts->{LASTERROR} = sprintf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        return 1;
    }

    my $json_hash = {};
    $json_hash->{mcastid} = $mcastid;
    $json_hash->{storageid} = $storageid;
    $json_hash->{dataip} = $dataip;
    $json_hash->{rdvip} = $rdvip;
    $json_hash->{interface} = $interface;
    $json_hash->{ratemx} = $ratemx;
    $json_hash->{mrecv} = $mrecv;

    my $url = "http://$baseurl:$port/$apiver/mcast";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new( 'POST', $url );
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) {
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );
    print "( $data->{mcastid} ) :  $data->{action} $data->{result} \n";

    return 0

}

=head2 remove --name <name>

Removes the multicast channel associated with specified mcastid.

=cut

sub remove
{
    my $verb = "remove";
    my $mcastid="";

    unless ( scalar @_ ) {
        &help( $opts, $cmds, $verb );
    }

    @ARGV = @_;
    GetOptions(
               'name=s' => \$mcastid,
               );

    if ( scalar @ARGV ) {
        $opts->{LASTERROR} = sprintf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        return 1;
    }

    my $url = "http://$baseurl:$port/$apiver/mcast/$mcastid";

    my $req = HTTP::Request->new( 'DELETE', $url );
    $req->content_type('application/json');

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) {
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );
    print "( $data->{mcastid} )  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 list [ --filter <id|name>::<partial*|specific> ]

List the registered multicast channels.

Option

     --filter id::'partial*'  filter results based on wildcard
     --filter name::specific  filter for a single match

=cut

sub list
{
    my $verb = "list";

    my $filter = "*";
    my %mcastStatus = (
                        0   => 'disabled',
                        1   => 'enabled',
                      );

    @ARGV = @_;

    GetOptions(
               'filter=s'   => \$filter,
              );

    if ( scalar @ARGV ) {
        $opts->{LASTERROR} = sprintf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        return 1;
    }

    my $url = "http://$baseurl:$port/$apiver/mcast/$filter";

    my $req = HTTP::Request->new( 'GET', $url );
    $req->header( 'Accept' => 'application/json' );

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) {
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );

    unless ($opts->{quiet}) {
        print "----------------------------------------------------------------------\n";
        printf "%-26s %-26s %8s\n", "mcastid", "image", "status";
        print "----------------------------------------------------------------------\n";
    }

    for my $node ( sort keys %$data ) {
        printf "%-26s %-26s %-8s \n", "$data->{$node}->{mcastid}", "$data->{$node}->{storageid}", "$data->{$node}->{status}";
    }

    return 0;
}

=head2 detail --name <name>

Show details for specified multicast channels

=cut

sub detail
{
    my $verb = "detail";
    my $name = "";

    unless ( scalar @_ ) {
        &help( $opts, $cmds, $verb );
    }

    @ARGV = @_;
    GetOptions(
               'name=s' => \$name,
               );

    if ( scalar @ARGV ) {
        $opts->{LASTERROR} = sprintf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        return 1;
    }

    my $url = "http://$baseurl:$port/$apiver/mcast/$verb/$name";

    my $req = HTTP::Request->new( 'GET', $url );
    $req->header( 'Accept' => 'application/json' );

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) { 
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );

    printf "%-12s %s\n", "mcastID:",     $data->{mcastid} ;
    printf "%-12s %s\n", "storageID:",   $data->{storageid} ;
    printf "%-12s %s\n", "dataIP:",      $data->{dataip} ;
    printf "%-12s %s\n", "rdvIP:",       $data->{rdvip} ;
    printf "%-12s %s\n", "interface:",   $data->{interface} ;
    printf "%-12s %s\n", "ratemx:",      $data->{ratemx} ;
    printf "%-12s %s\n", "mrecv:",       $data->{mrecv} ;
    printf "%-12s %s\n", "status:",      $data->{status} ;
    if ( $data->{status} == 1 ) { printf "%-12s %s\n", "pid:", $data->{pid}; }

    return 0;
}

=head2 enable --name <name>

Enable the multicast channel associated with specified mcastid.

=cut

=head2 disable --name <name>

Enable the multicast channel associated with specified mcastid.

=cut

sub enable  { &_enable_disable_( "enable",  @_ );}
sub disable { &_enable_disable_( "disable", @_ );}

sub _enable_disable_
{
    my $verb = shift;

    unless ( scalar @_ ) {
        &help( $opts, $cmds, $verb );
    }

    my $mcastid="";

    @ARGV = @_;
    GetOptions(
               'name=s' => \$mcastid,
               );

    if ( scalar @ARGV ) {
        $opts->{LASTERROR} = sprintf "\nUnknown arg(s): %s\n", join(" ", @ARGV);
        return 1;
    }

    my $json_hash = {};
    $json_hash->{verb}    = $verb;
    $json_hash->{mcastid} = $mcastid;

    my $url = "http://$baseurl:$port/$apiver/mcast";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new( 'PUT', $url );
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) {
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );
    print "$data->{mcastid}  :  $data->{action} $data->{result} \n";

    return 0;

}

=head2 init

Initialize all enabled multicast channels

=cut

=head2 destroy

Stops all enabled multicast channels

=cut


sub init    { &_init_destroy_( "init",  @_ );}
sub destroy { &_init_destroy_( "destroy", @_ );}

sub _init_destroy_
{
    my $verb = shift;

    my $json_hash = {};
    $json_hash->{verb} = $verb;
    

    my $url = "http://$baseurl:$port/$apiver/mcast";
    my $message = to_json($json_hash);

    my $req = HTTP::Request->new( 'PUT', $url );
    $req->content_type('application/json');
    $req->content($message);

    my $response = $browser->request( $req );

    die "Hey, I was expecting JSON, not ", $response->content_type
      unless $response->content_type eq 'application/json';

    unless ( $response->is_success ) {
        if ( $response->status_line =~ m|406 Not Acceptable| ) {
            die $response->content;
        } else {
            die "Can't get $url -- ", $response->status_line;
        }
    }

    my $data = from_json( $response->content );
    print "$data->{action} $data->{result} \n";

    return 0;

}

die "ABSOLUTELY DOES NOT EXECUTE";

__END__
