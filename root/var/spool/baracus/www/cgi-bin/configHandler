#!/usr/bin/perl

use strict;
use warnings;

use CGI qw(:standard);

use lib '/var/spool/baracus/www/modules';
use BATools qw(:standard);


our $rURL = "config";
our $ref = "no";
our $seconds = 1;

my $op = param('op') || "";

my $header  = &getConfigHandlerHeader( $op );
my $content = &getConfigHandlerContent( $op );

my $refresh = "";

if ( $ref eq "yes") {
	$refresh = qq|onLoad="doLoad( '$rURL', '', $seconds)"|;
}

print "Content-type: text/html\n\n";

print<<HTML0

<html>
	<head>
		<META HTTP-EQUIV="Expires" CONTENT="Tue, 04 Dec 1993 21:29:02 GMT">
		<link rel='stylesheet' href='/$BATools::baRoot/css/common.css' type='text/css' >
		<script type="text/javascript" src="/$BATools::baRoot/script/common.js"></script>
	</head>
	<div id='output'>
	<body background="/baracus/images/bg-grad.jpg" $refresh>
	<h1>$header</h1><br/>
	<pre>$content</pre>
	<body>
	</div>
</html>

HTML0
;

sub getConfigHandlerContent
{
	my $r = "Not Implemented";
	my $op = shift;

    my $Data     = param('data')     || "";
    my $Cert     = param('cert')     || "";
    my $RMCert   = param('rmcert')   || "";
    my $Mand     = param('mancert')  || "";
    my $OptCert  = param('optcert')  || "";
    my $ver      = param('ver')      || -1;
    my $sta      = param('sta')      || -1;

    # handle 'sub' from any of three buttons
    my $submitau = param('submitau') || "";
    my $submitt  = param('submitt')  || "";
    my $submitd  = param('submitd')  || "";

    my $Name;
    my $tFile;

	if ( $op eq "module") {
		$rURL .= "Module";

		if ( $submitau eq "Add") {
            $Name = param('nname') || "";

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
			} elsif ( $Data =~ m/^\s*$/ ) {
                $r = "Invalid Request\n\nCannot create entry without data";
            } else {
                $r = BAdb::checkRedundant( $op, $Name, $Data);
            }

            if ( $r eq "" ) {
                $tFile = "/tmp/".BATools::generate_random_string().".ba";
                open( TFILE, "> $tFile");
                print TFILE $Data;
                close TFILE;

                # we add the cert for distros this includes the distros
                # for which this module is to be flagged mandatory
                if ( $Cert eq "" ) {
                    $r = BAdb::addModuleFromFile( $Name, $tFile);
                } else {
                    $r = BAdb::addModuleFromFileWithCerts( $Name, $tFile, $Cert, $Mand );
                }
            }

			if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
				$r = "Add Success: $Name";
			}
		} elsif ( $submitau eq "Update") {
            $Name = param("$op") || "";
            $ver = "" if ( $ver == -1 );

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
            }
            else
            {
                my $a = "";

                # have data or not
                if ( $Data =~ m/^\s*$/ ) {
                    $tFile = "";
                } else {
                    # data redundant or not
                    $a = BAdb::checkRedundant( $op, $Name, $Data);
                    if ( $a ne "" ) {
                        $tFile = "";
                    } else {
                        $tFile = "/tmp/".BATools::generate_random_string().".ba";
                        open( TFILE, "> $tFile");
                        print TFILE $Data;
                        close TFILE;
                    }
                }
                # we add the cert for distros this includes the distros
                # for which this module is to be flagged mandatory
                if ( $Cert or $RMCert or $Mand or $OptCert ) {
                    # this call will handle tFile eq ""
                    $r = BAdb::updateModuleFromFileWithCerts
                        ( $Name, $tFile, $Cert, $RMCert, $Mand, $OptCert, $ver );
                } elsif ( $tFile ne "" ) {
                    $r = BAdb::updateModuleFromFile( $Name, $tFile);
                } else {
                    $r = $a . "\nNo data modifications nor certifications to update.";
                }
            }

			if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Update Success: $Name";
			}
		} elsif ( $submitd eq "Delete") {
			$Name = param("$op") || "";

			if ( $Name ) {
				$r = BAdb::removeModule( $Name, $ver);
			} else {
				$r = "Error: No module selected.\n";
			}

			if ( $r eq "") {
				$ref = "yes";
				$r = "Delete Success";
			}
		} elsif ( $submitt eq "Toggle Status") {
			$Name = param("$op") || "";

			if ( $Name ) {
				if ( $sta eq 1) {
					$r = BAdb::disableModule( $Name, $ver);
				} elsif ( $sta < 1) {
					$r = BAdb::enableModule( $Name, $ver);
				} else {
					$r = "Error: Invalid Status: $sta";
				}
			} else {
				$r = "Error: No module selected.\n";
            }

			if ( $r eq "") {
				$ref = "yes";
				$rURL .="?name=$Name&ver=$ver";
				$r = "Status Change Success";
			}
		}
	} elsif ( $op eq "autobuild") {
        $rURL .= "Autobuild";

        if ( $submitau eq "Add") {
            $Name = param('nname') || "";

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
			} elsif ( $Data =~ m/^\s*$/ ) {
                $r = "Invalid Request\n\nCannot create entry without data";
            } else {
                $r = BAdb::checkRedundant( $op, $Name, $Data);
            }

            if ( $r eq "" ) {
                $tFile = "/tmp/".BATools::generate_random_string().".ba";
                open( TFILE, "> $tFile");
                print TFILE $Data;
                close TFILE;

                if ( $Cert eq "" ) {
                    $r = BAdb::addAutobuildFromFile( $Name, $tFile);
                } else {
                    $r = BAdb::addAutobuildFromFileWithCerts( $Name, $tFile, $Cert );
                }
            }

            if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Add Success: $Name";
            }
        } elsif ( $submitau eq "Update") {
            $Name = param("$op") || "";
            $ver = "" if ( $ver == -1 );

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
            }
            else
            {
                my $a = "";

                # have data or not
                if ( $Data =~ m/^\s*$/ ) {
                    $tFile = "";
                } else {
                    # data redundant or not
                    $a = BAdb::checkRedundant( $op, $Name, $Data);
                    if ( $a ne "" ) {
                        $tFile = "";
                    } else {
                        $tFile = "/tmp/".BATools::generate_random_string().".ba";
                        open( TFILE, "> $tFile");
                        print TFILE $Data;
                        close TFILE;
                    }
                }

                if ( $Cert or $RMCert ) {
                    # this call will handle tFile eq ""
                    $r = BAdb::updateAutobuildFromFileWithCerts
                        ( $Name, $tFile, $Cert, $RMCert, $ver);
                } elsif ( $tFile ne "" ) {
                    $r = BAdb::updateAutobuildFromFile( $Name, $tFile);
                } else {
                    $r = $a . "\nNo data modifications nor certifications to update.";
                }
            }

            if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Update Success: $Name";
            }
        } elsif ( $submitd eq "Delete") {
            $Name = param("$op") || "";

            if ( $Name ) {
                $r = BAdb::removeAutobuild( $Name, $ver);
            } else {
                $r = "Error: No autobuild selected.\n";
            }

            if ( $r eq "") {
                $ref = "yes";
                $r = "Delete Success";
            }
        } elsif ( $submitt eq "Toggle Status") {
            $Name = param("$op") || "";

            if ( $Name ) {
                if ( $sta eq 1) {
                    $r = BAdb::disableAutobuild( $Name, $ver);
                } elsif ( $sta < 1) {
                    $r = BAdb::enableAutobuild( $Name, $ver);
                } else {
                    $r = "Error: Invalid Status: $sta";
                }
            } else {
                $r = "Error: No autobuild selected.\n";
            }
            if ( $r eq "") {
                $ref = "yes";
                $rURL .= "?name=$Name&ver=$ver";
                $r = "Status Change Success";
            }
        }
    } elsif ( $op eq "profile") {
        $rURL .= "Profile";

        if ( $submitau eq "Add") {
            $Name = param('nname') || "";

            if ( $Name eq "") {
                $r = "Invalid Request\n\nPlease enter a name for this $op";
            } elsif ( $Data =~ m/^\s*$/ ) {
                $r = "Invalid Request\n\nCannot create entry without data";
            } else {
                $r = BAdb::checkRedundant( $op, $Name, $Data);
            }

            if ( $r eq "" ) {
                $tFile = "/tmp/".BATools::generate_random_string().".ba";
                open( TFILE, "> $tFile");
                print TFILE $Data;
                close TFILE;

                $r = BAdb::addProfileFromFile( $Name, $tFile);
            }

            if ( $r eq "" ) {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Add Success: $Name";
            }
        } elsif ( $submitau eq "Update") {
            $Name = param("$op") || "";

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
            } else {
                $r = BAdb::checkRedundant( $op, $Name, $Data);
            }

            if ( $r eq "" ) {

                if ( $Data =~ m/^\s*$/ ) {
                    $r = "No data modifications to update.";
                } else {
                    $tFile = "/tmp/".BATools::generate_random_string().".ba";
                    open( TFILE, "> $tFile");
                    print TFILE $Data;
                    close TFILE;

                    $r = BAdb::updateProfileFromFile( $Name, $tFile);
                }
            }

            if ( $r eq "")  {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Update Success: $Name";
            }
        } elsif ( $submitd eq "Delete") {
            $Name = param("$op") || "";

            if ( $Name ) {
                $r = BAdb::removeProfile( $Name, $ver);
            } else {
                $r = "Error: No profile selected.\n";
            }

            if ( $r eq "" ) {
                $ref = "yes";
                $r = "Delete Success";
            }
        } elsif ( $submitt eq "Toggle Status") {
            $Name = param("$op") || "";

            if ( $Name ) {
                if ( $sta eq 1) {
                    $r = BAdb::disableProfile( $Name, $ver);
                } elsif ( $sta < 1) {
                    $r = BAdb::enableProfile( $Name, $ver);
                } else {
                    $r = "Error: Invalid Status: $sta";
                }
            } else {
                $r = "Error: No profile selected.\n";
            }
            if ( $r eq "" ) {
                $ref = "yes";
                $rURL .= "?name=$Name&ver=$ver";
                $r = "Status Change Success";
            }
        }
    } elsif ( $op eq "hardware") {
        $rURL .= "Hardware";

        if ( $submitau eq "Add") {
            $Name = param('nname') || "";

            my $has_field = 0;
            my $fields = {};
            foreach my $key ( qw( bootargs rootdisk rootpart hwdriver ) ) {
                $fields->{ $key } = param("$key") || "" ;
                if ( $fields->{ $key } ne "" ) {
                    $has_field = 1;
                }
            }

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
			} elsif ( $Cert eq "" ) {
                $r = BAdb::addHardwareFromFields( $Name, $fields );
            } else {
                $r = BAdb::addHardwareFromFieldsWithCerts( $Name, $fields, $Cert );
            }

            if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Add Success: $Name";
            }
        } elsif ( $submitau eq "Update") {
            $Name = param("$op") || "";
            $ver = "" if ( $ver == -1 );

            my $has_field = 1;
            my $fields = {};
            foreach my $key ( qw( bootargs rootdisk rootpart hwdriver ) ) {
                $fields->{ $key } = param("$key") || "" ;
            }

            if ( $Name eq "") {
				$r = "Invalid Request\n\nPlease enter a name for this $op";
            } else {
                # always have fields: redundant or not
                my $a = BAdb::checkRedundant( $op, $Name, $fields);
                if ( $a ne "" ) {
                    $has_field = 0;
                    $fields = undef;
                }

                if ( $Cert or $RMCert ) {
                    # this call will handle fields eq undef
                    $r = BAdb::updateHardwareFromFieldsWithCerts( $Name, $fields, $Cert, $RMCert, $ver );
                } elsif ( $has_field ) {
                    $r = BAdb::updateHardwareFromFields( $Name, $fields );
                } else {
                    $r = $a . "\nNo data modifications nor certifications to update.";
                }
            }

            if ( $r eq "") {
				$ref = "yes";
                $rURL .= "?name=$Name";
                $r = "Update Success: $Name";
            }
        } elsif ( $submitd eq "Delete") {
            $Name = param("$op") || "";

            if ( $Name ) {
                $r = BAdb::removeHardware( $Name, $ver);
            } else {
                $r = "Error: No hardware selected.\n";
            }

            if ( $r eq "") {
                $ref = "yes";
                $r = "Delete Success";
            }
        } elsif ( $submitt eq "Toggle Status") {
            $Name = param("$op") || "";

            if ( $Name ) {
                if ( $sta eq 1) {
                    $r = BAdb::disableHardware( $Name, $ver);
                } elsif ( $sta < 1) {
                    $r = BAdb::enableHardware( $Name, $ver);
                } else {
                    $r = "Error: Invalid Status: $sta";
                }
            } else {
                $r = "Error: No hardware selected.\n";
            }

            if ( $r eq "") {
                $ref = "yes";
                $rURL .= "?name=$Name&ver=$ver";
                $r = "Status Change Success";
            }
        }
    }
    return $r;
}

sub getConfigHandlerHeader
{
    my $op = shift;

    my $r;
    my $ver      = param('ver')      || -1;
    my $sta      = param('sta')      || -1;

    my $submitau = param('submitau') || "";
    my $submitt  = param('submitt')  || "";
    my $submitd  = param('submitd')  || "";

    if ( $submitau eq "Add") {
        $r = param('nname'); chomp $r;
        $r = "Adding $op:  $r (version 1)";
    } elsif ( $submitau eq "Update") {
        $r = param($op); chomp $r;
        $r = "Updating $op:  $r" ;
        if ( $ver != -1 and $ver ne "" ) {
            chomp $ver;
            $r .= " (version $ver)";
        }
    } elsif ( $submitt eq "Toggle Status") {
        $r = param($op); chomp $r;
        if ( $sta eq 1 ) {
            $r = "Disabling $op:  $r";
        } else {
            $r = "Enabling $op:  $r";
        }
        if ( $ver != -1 and $ver ne "" ) {
            chomp $ver;
            $r .= " (version $ver)";
        }
    } elsif ( $submitd eq "Delete") {
        $r = param($op); chomp $r;
        $r = "Deleting $op:  $r";
        if ( $ver != -1 and $ver ne "" ) {
            chomp $ver;
            $r .= " (version $ver)";
        }
    }
    return $r
}
